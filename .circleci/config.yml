version: 2.1

executors:

  mac:
    macos:
      xcode: "12.3.0"

  go:
    docker:
      - image: circleci/golang:1.8

  linux:
    docker:
      - image: norionomura/swift:532

commands:

  persist:
    parameters:
      path:
        type: string
    steps:
      - persist_to_workspace:
          root: .
          paths:
            - << parameters.path >>

  attach:
    steps:
      - attach_workspace:
          at: .

jobs:

  resolve:
    executor: mac
    steps:
      - checkout
      - run: swift package resolve
      - persist:
          path: .build

  build_package:
    executor: mac
    parameters:
      artifacts:
        default: artifacts
        type: string
    steps:
      - checkout
      - attach
      - run:
          command: make package
          name: Build package
      - run: mkdir -p << parameters.artifacts >>
      - run:
          command: mv "${CIRCLE_PROJECT_REPONAME}.pkg" << parameters.artifacts >>
          name: Move artifacts
      - persist:
          path: << parameters.artifacts >>

  generate_changelog:
    executor: mac
    parameters:
      artifacts:
        default: changelog
        type: string
    steps:
      - checkout
      - run: mkdir -p << parameters.artifacts >>
      - attach
      - run: FINCH_CONFIG=.finch/release_config.yml swift run finch compare > << parameters.artifacts >>/changelog.md
      - persist:
          path: << parameters.artifacts >>

  publish_release:
    executor: go
    steps:
      - attach
      - run:
          command: |
            go get github.com/tcnksm/ghr
            ghr \
              -t ${GITHUB_TOKEN} \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} \
              -c ${CIRCLE_SHA1} \
              -n ${CIRCLE_TAG} \
              -b "$(cat changelog/changelog.md)" \
              -delete \
              -replace \
              -draft \
              -prerelease \
              ${CIRCLE_TAG} "artifacts/${CIRCLE_PROJECT_REPONAME}.pkg"
          name: Publish release to GitHub

  mint:
    executor: mac
    parameters:
      command:
        type: string
        default: bootstrap
    steps:
      - restore_cache:
          key: v{{ .Environment.CACHE_VERSION }}-mint-cache-{{ arch }}-{{ checksum "Mintfile" }}
      - run: HOMEBREW_NO_AUTO_UPDATE=1 brew install mint
      - run: mint << parameters.command >>
      - save_cache:
          key: v{{ .Environment.CACHE_VERSION }}-mint-cache-{{ arch }}-{{ checksum "Mintfile" }}
          paths:
            - .mint_build/

  lint:
    executor: mac
    parameters:
      lint-cache-dir:
        default: lint/cache
        type: string
      lint-results-dir:
        default: build/reports/lint
        type: string
    steps:
      - checkout
      - restore_cache:
          keys:
            - v{{ .Environment.CACHE_VERSION }}-lint-cache-{{ arch }}-{{ .Branch }}
            - v{{ .Environment.CACHE_VERSION }}-lint-cache-{{ arch }}
          name: Restore lint cache
      - run: mkdir -p << parameters.lint-cache-dir >> << parameters.lint-results-dir >>
      - mint
      - run:
          command: |
            mint run swiftlint swiftlint --strict --reporter junit --cache-path << parameters.lint-cache-dir >> | tee << parameters.lint-results-dir >>/results.xml
          name: SwiftLint
      - run:
          command: |
            mint run swiftformat swiftformat --lint .
          name: SwiftFormat
      - save_cache:
          key: v{{ .Environment.CACHE_VERSION }}-lint-cache-{{ arch }}-{{ .Branch }}
          paths:
            - << parameters.lint-cache-dir >>
          name: Save lint cache
      - store_artifacts:
          path: << parameters.lint-results-dir >>

  test:
    executor: mac
    parameters:
      test-results-dir:
        default: build/reports/test
        type: string
    steps:
      - checkout
      - attach
      - run: mkdir -p << parameters.test-results-dir >>
      - run:
          name: Run tests
          command: make test
      - store_test_results:
          path: << parameters.test-results-dir >>

  generate_linuxmain:
    executor: mac
    steps:
      - checkout
      - attach
      - run: make update_build_number
      - run: make linuxmain
      - persist_to_workspace:
          root: .
          paths:
            - LinuxMain.swift
            - Tests/XCTestManifests.swift

  test_linux:
    executor: linux
    parameters:
      test-results-dir:
        default: build/reports/test
        type: string
    steps:
      - checkout
      - attach
      - run: make update_build_number
      - run: mkdir -p << parameters.test-results-dir >>
      - run:
          name: Run tests
          command: FINCH_TESTS=1 swift test || FINCH_TESTS=1 swift test || FINCH_TESTS=1 swift test
      - store_test_results:
          path: << parameters.test-results-dir >>

workflows:
  lint:
    jobs:
      - lint:
          filters:
            tags:
              only: /.*/

  build:
    jobs:
      - resolve:
          filters:
            tags:
              only: /.*/
      - test:
          filters:
            tags:
              only: /.*/
          requires:
            - resolve
      - build_package:
          requires:
            - resolve
            - test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - generate_changelog:
          requires:
            - resolve
            - test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - publish_release:
          requires:
            - test
            - build_package
            - generate_changelog
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - generate_linuxmain:
          requires:
            - resolve
      - test_linux:
          requires:
            - generate_linuxmain
