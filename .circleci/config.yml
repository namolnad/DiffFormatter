version: 2.1
executors:
  mac:
    macos:
      xcode: "10.1.0"
  go:
    docker:
      - image: circleci/golang:1.8
jobs:
  build_package:
    executor: mac
    parameters:
      artifacts-path:
        default: artifacts
        type: string
    steps:
      - checkout
      - run:
          command: make package
          name: Build package
      - run: mkdir -p << parameters.artifacts-path >>
      - run:
          command: mv "$CIRCLE_PROJECT_REPONAME.pkg" << parameters.artifacts-path >>
          name: Move artifacts
      - persist_to_workspace:
          root: << parameters.artifacts-path >>
          paths:
            - .
  generate_changelog:
    executor: mac
    parameters:
      changelog-path:
        default: changelog.md
        type: string
    steps:
      - checkout
      - run: make install
      - run: FINCH_CONFIG=.finch/release_config.yml finch compare > << parameters.changelog-path >>
      - persist_to_workspace:
          root: .
          paths:
            - << parameters.changelog-path >>
  publish_release:
    executor: go
    parameters:
      artifacts-path:
        default: artifacts
        type: string
      changelog-dir:
        default: changelog
        type: string
      changelog-path:
        default: changelog.md
        type: string
    steps:
      - run: mkdir -p << parameters.artifacts-path >>
      - attach_workspace:
          at: << parameters.artifacts-path >>
      - run: mkdir -p << parameters.changelog-dir >>
      - run: mv << parameters.artifacts-path >>/<< parameters.changelog-path >> << parameters.changelog-dir >>/
      - run:
          command: |
            go get github.com/tcnksm/ghr
            ghr \
              -t ${GITHUB_TOKEN} \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} \
              -c ${CIRCLE_SHA1} \
              -n ${CIRCLE_TAG} \
              -b $(cat << parameters.changelog-dir >>/<< parameters.changelog-path >>) \
              -delete \
              -prerelease \
              -draft \
              ${CIRCLE_TAG} << parameters.artifacts-path >>/"$CIRCLE_PROJECT_REPONAME.pkg"
          name: Publish release to GitHub
  swiftlint:
    executor: mac
    parameters:
      lint-cache-dir:
        default: lint/cache
        type: string
      lint-results-dir:
        default: build/reports/lint
        type: string
      lint-bin:
        default: .build/debug/swiftlint
        type: string
    steps:
      - checkout
      - restore_cache:
          keys:
            - v{{ .Environment.CACHE_VERSION }}-lint-cache-{{ arch }}-{{ .Branch }}
            - v{{ .Environment.CACHE_VERSION }}-lint-cache-{{ arch }}
          name: Restore lint cache
      - restore_cache:
          keys:
            - v{{ .Environment.CACHE_VERSION }}-build-cache-{{ arch }}-{{ checksum "Package.resolved" }}
          name: Restore bin cache
      - run: mkdir -p << parameters.lint-cache-dir >> << parameters.lint-results-dir >>
      - run:
          command: |
            executable=$(echo '<< parameters.lint-bin >>')
            if ! [ $(command -v $executable) ]; then
              executable='swift run swiftlint'
            fi

            eval $executable lint --strict --reporter junit --cache-path << parameters.lint-cache-dir >> | tee << parameters.lint-results-dir >>/results.xml
          name: Lint
      - save_cache:
          key: v{{ .Environment.CACHE_VERSION }}-build-cache-{{ arch }}-{{ checksum "Package.resolved" }}
          paths:
            - << parameters.lint-bin >>
          name: Save bin cache
      - save_cache:
          key: v{{ .Environment.CACHE_VERSION }}-lint-cache-{{ arch }}-{{ .Branch }}
          paths:
            - << parameters.lint-cache-dir >>
          name: Save lint cache
      - store_artifacts:
          path: << parameters.lint-results-dir >>
  test:
    executor: mac
    parameters:
      test-results-dir:
        default: build/reports/test
        type: string
    steps:
      - checkout
      - run: mkdir -p << parameters.test-results-dir >>
      - run:
          name: Run tests
          command: make test
      - store_test_results:
          path: << parameters.test-results-dir >>

workflows:
  build:
    jobs:
      - swiftlint
      - test
      - build_package:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - generate_changelog:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - publish_release:
          requires:
            - swiftlint
            - test
            - build_package
            - generate_changelog
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
